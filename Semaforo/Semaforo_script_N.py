import mesa 
import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pylab as plt
import random
import networkx as nx

nodos = {
    (0, 0): [(1,0), (0,1)], 
    (0, 1): [(0,0),(1,1)],
    (0, 2): [(1,2),(0,1)], 
    (0, 3): [(1,3),(0,2)], 
    (0, 4): [(1,4),(0,3)], 
    (0, 5): [(1,5),(0,4)],
    (0, 6): [(1,6),(0,5)], 
    (0, 7): [(1,7),(0,6)],
    (0, 8): [(1,8),(0,7)],
    (0, 9): [(1,9),(0,8)],
    (0, 10): [(1,10),(0,9)], 
    (0, 11): [(1,11),(0,10)],
    (0, 12): [(1,12),(0,11)],
    (0, 13): [(1,13),(0,12)],
    (0, 14): [(1,14),(0,13)],
    (0, 15): [(1,15),(0,14)],
    (0, 16): [(1,16),(0,15)],
    (0, 17): [(1,17),(0,16)],
    (0, 18): [(1,18),(0,17)],
    (0, 19): [(1,19),(0,18)],
    (0, 20): [(1,20),(0,19)],
    (0, 21): [(1,21),(0,20)],
    (0, 22): [(0,21)],
    (0, 23): [(0,22)],
    #######
    (1, 0): [(2,0)], 
    (1, 1): [(2,1),(1,0)], 
    (1, 2): [(0,2),(1,1)], 
    (1, 3): [(0,3),(1,2)], 
    (1, 4): [(0,4),(1,3)],
    (1, 5): [(0,5),(1,4)], 
    (1, 6): [(0,6),(1,5),(2,6)], 
    (1, 7): [(0,7),(1,6)], 
    (1, 8): [(0,8),(1,7),(2,8)],
    (1, 9): [(0,9),(1,8),(2,9)], 
    (1, 10): [(0,10),(1,9)],
    (1, 11): [(0,11),(1,10)], 
    (1, 12): [(0,12),(1,11)],
    (1, 13): [(0,13),(1,12)], 
    (1, 14): [(0,14),(1,13)],
    (1, 15): [(0,15),(1,14)],
    (1, 16): [(0,16),(1,15)], 
    (1, 17): [(0,17),(1,16)],
    (1, 18): [(0,18),(1,17)],
    (1, 19): [(0,19),(1,18)],
    (1, 20): [(0,20),(1,19),(2,20)],
    (1, 21): [(0,21),(1,20)],
    (1, 22): [(0,22),(1,21)],
    (1, 23): [(0,23),(1,22)],
    ########
    (2, 0): [(3,0),(2,1)],
    (2, 1): [(3,1),(2,0)],
    (2, 6): [(1,6)],
    (2, 8): [(3,8),(2,9)],
    (2, 9): [(3,9),(2,8)],
    (2, 10): [(1,10),(2,11)],
    (2, 11): [(1,11),(2,10)],
    (2, 16): [(1,16),(2,17)],
    (2, 17): [(1,17),(2,16)],
    (2, 20): [(1,20)],
    (2, 22): [(1,22),(2,23)],
    (2, 23): [(1,23),(2,22)],
    ########
    (3, 0): [(4,0),(3,1)],
    (3, 1): [(4,1),(3,0)],
    (3, 8): [(4,8),(3,9)],
    (3, 9): [(4,9),(3,8)],
    (3, 10): [(2,10),(3,11)],
    (3, 11): [(2,11),(3,10)],
    (3, 16): [(2,16),(3,17)],
    (3, 17): [(2,17),(3,16)],
    (3, 22): [(2,22),(3,23)],
    (3, 23): [(2,23),(3,22)],
    ########
    (4, 0): [(5,0),(4,1)],
    (4, 1): [(4,0),(5,1)],
    (4, 8): [(5,8),(4,9)],
    (4, 9): [(5,9),(4,8)],
    (4, 10): [(3,10),(4,11)],
    (4, 11): [(3,11),(4,10)],
    (4, 13): [(5,13)],
    (4, 16): [(3,16),(4,17)],
    (4, 17): [(3,17),(4,16)],
    (4, 22): [(3,22),(4,23)],
    (4, 23): [(3,23),(4,22)],
    ########
    (5, 0): [(6,0),(5,1)],
    (5, 1): [(5,0),(6,1)],
    (5, 3): [(6,3)],
    (5, 8): [(6,8),(5,9)], 
    (5, 9): [(6,9),(5,8)],
    (5, 10): [(4,10),(5,11)], 
    (5, 11): [(4,11),(5,10),(5,12)],
    (5, 12): [(5,13),(6,12)],
    (5, 13): [(5,14),(6,13),(4,13)],
    (5, 14): [(5,15),(6,14)], 
    (5, 15): [(5,16),(6,15)],
    (5, 16): [(4,16),(5,17)], 
    (5, 17): [(4,17),(5,16)], 
    (5, 22): [(4,22),(5,23)],
    (5, 23): [(4,23),(5,22)],
    ########
    (6, 0): [(7,0),(6,1)],
    (6, 1): [(6,0),(7,1)],
    (6, 2): [(7,2),(6,1)], 
    (6, 3): [(7,3),(6,2),(5,3)],
    (6, 4): [(7,4),(6,3)],
    (6, 5): [(7,5),(6,4)],
    (6, 6): [(7,6),(6,5)],
    (6, 7): [(7,7),(6,6)],
    (6, 8): [(7,8),(6,9),(6,7)],
    (6, 9): [(7,9),(6,8)], 
    (6, 10): [(5,10),(6,11)], 
    (6, 11): [(5,11),(6,10),(6,12)],
    (6, 12): [(6,13),(5,12)],
    (6, 13): [(6,14),(5,13)],
    (6, 14): [(6,15),(5,14)],
    (6, 15): [(6,16),(5,15)],
    (6, 16): [(5,16),(6,17)],
    (6, 17): [(5,17),(6,16),(6,18)],
    (6, 18): [(6,17)],
    (6, 22): [(5,22),(6,23)],
    (6, 23): [(5,23),(6,22)],
    ########
    (7, 0): [(8,0),(7,1)],
    (7, 1): [(7,0),(8,1)],
    (7, 2): [(6,2),(7,1)],
    (7, 3): [(6,3),(7,2),(8,3)],
    (7, 4): [(6,4),(7,3)],
    (7, 5): [(6,5),(7,4)],
    (7, 6): [(6,6),(7,5)],
    (7, 7): [(6,7),(7,6)],
    (7, 8): [(8,8),(7,9),(7,7)],
    (7, 9): [(8,9),(7,8)],
    (7, 10): [(6,10),(7,11)],
    (7, 11): [(6,11),(7,10)],
    (7, 16): [(6,16),(7,17)],
    (7, 17): [(6,17),(7,16)],
    (7, 22): [(6,22),(7,23)],
    (7, 23): [(6,23),(7,22)],
    ########
    (8, 0): [(9,0),(8,1)],
    (8, 1): [(8,1),(9,1)],
    (8, 3): [(7,3)],
    (8, 8): [(9,8),(8,9)],
    (8, 9): [(9,9),(8,8)],
    (8, 10): [(7,10),(8,11)],
    (8, 11): [(7,11),(8,10)],
    (8, 15): [(8,16)],
    (8, 16): [(7,16),(8,17),(8,15)],
    (8, 17): [(7,17),(8,16)],
    (8, 22): [(7,22),(8,23)],
    (8, 23): [(7,23),(8,22)],
    ########
    (9, 0): [(10,0),(9,1)],
    (9, 1): [(9,1),(10,1)],
    (9, 8): [(10,8),(9,9)],
    (9, 9): [(10,9),(9,8)],
    (9, 10): [(8,10),(9,11)],
    (9, 11): [(8,11),(9,10)],
    (9, 16): [(8,16),(9,17)],
    (9, 17): [(8,17),(9,16)],
    (9, 21): [(9,22)],
    (9, 22): [(8,22),(9,23),(9,21)],
    (9, 23): [(8,23),(9,22)],
    ########
    (10, 0): [(11,0),(10,1)], 
    (10, 1): [(10,0),(11,1)],
    (10, 8): [(11,8),(10,9)],
    (10, 9): [(11,9),(10,8)],
    (10, 10): [(9,10),(10,11)],
    (10, 11): [(9,11),(10,10)],
    (10, 16): [(8,16),(9,17)],
    (10, 17): [(8,17),(9,16)],
    (10, 22): [(9,22),(10,23)],
    (10, 23): [(9,23),(10,22)],
    #########
    (11, 0): [(12,0),(11,1)],
    (11, 1): [(11,0),(12,1)],
    (11, 8): [(12,8),(11,9)],
    (11, 9): [(12,9),(11,8)],
    (11, 10): [(10,10),(11,11)],
    (11, 11): [(10,11),(11,10)],
    (11, 13): [(12,13)],
    (11, 16): [(10,16),(11,17)],
    (11, 17): [(10,17),(11,16)],
    (11, 19): [(12,19)],
    (11, 22): [(10,22),(11,23)],
    (11, 23): [(10,23),(11,22)],
    #########
    (12, 0): [(13, 0), (12, 1)],
    (12, 1): [(12, 0), (13, 1)],
    (12, 2): [(12, 1), (13, 2)],
    (12, 3): [(12, 2), (13, 3)],
    (12, 4): [(12, 3), (13, 4)],
    (12, 5): [(12, 4), (13, 5)],
    (12, 6): [(12, 5), (13, 6)],
    (12, 7): [(12, 6), (13, 7)],
    (12, 8): [(12, 7), (13, 8)],
    (12, 9): [(12, 8)],
    (12, 10): [(12, 9), (11, 10)],
    (12, 11): [(12, 10), (11, 11)],
    (12, 12): [(12, 11), (13, 12)],
    (12, 13): [(12, 12), (13, 13),(11,13)],
    (12, 14): [(12, 13), (13, 14)],
    (12, 15): [(12, 14), (13, 15)],
    (12, 16): [(12, 15), (13, 16), (11,16)],
    (12, 17): [(12, 16), (13, 17), (11, 17)],
    (12, 18): [(12, 17), (13, 18)],
    (12, 19): [(12, 18), (13, 19),(11,19)],
    (12, 20): [(12, 19), (13, 20)],
    (12, 21): [(12, 20), (13, 21)],
    (12, 22): [(12, 21), (11, 22)],
    (12, 23): [(12, 22), (11, 23)],
    #########
    (13, 0): [(14,0), (1, 1)],
    (13, 1): [(13, 0), (14, 1)],
    (13, 2): [(13, 1), (12, 2)],
    (13, 3): [(13, 2), (12, 3)],
    (13, 4): [(13, 3), (12, 4)],
    (13, 5): [(13, 4), (12, 5)],
    (13, 6): [(13, 5), (12, 6)],
    (13, 7): [(13, 6), (12, 7)],
    (13, 8): [(13, 7), (14, 8)],
    (13, 11): [(12, 11)],
    (13, 12): [(13, 11), (12, 12)],
    (13, 13): [(13, 12), (12, 13)],
    (13, 14): [(13, 13), (12, 14)],
    (13, 15): [(13, 14), (12, 15)],
    (13, 16): [(13, 15), (12, 16)],
    (13, 17): [(13, 16), (12, 17)],
    (13, 18): [(13, 17), (12, 18)],
    (13, 19): [(13, 18), (12, 19)],
    (13, 20): [(13, 19), (12, 20)],
    (13, 21): [(13, 20), (12, 21)],
    (13, 22): [(13, 21), (12, 22), (13, 23)],
    (13, 23): [(13, 22), (12, 23)],
    #########
    (14, 0): [(15, 0), (14, 1)],
    (14, 1): [(14, 2), (15, 1), (14, 0)],
    (14, 2): [(14, 3), (15, 2)],
    (14, 3): [(14, 4), (15, 3)],
    (14, 4): [(14, 5), (15, 4)],
    (14, 5): [(14, 6), (15, 5)],
    (14, 6): [(14, 7), (15, 6)],
    (14, 7): [(14, 8), (15, 7)],
    (14, 8): [(15, 8)],
    (14, 11): [(14, 12), (13, 11)],
    (14, 12): [(14, 13), (15, 12)],
    (14, 13): [(14, 14), (15, 13)],
    (14, 14): [(14, 15), (15, 14)],
    (14, 15): [(14, 16), (15, 15)],
    (14, 16): [(14, 17), (15, 16)],
    (14, 17): [(14, 18), (15, 17)],
    (14, 18): [(14, 19), (15, 18)],
    (14, 19): [(14, 20), (15, 19)],
    (14, 20): [(14, 21), (15, 20)],
    (14, 21): [(14, 22), (15, 21)],
    (14, 22): [(13, 22), (14, 23)],
    (14, 23): [(13, 23), (14, 22)],
    #########
    (15, 0): [(16, 0), (15, 1)],
    (15, 1): [(16, 1), (15, 0), (15, 2)],
    (15, 2): [(15, 3), (14, 2)],
    (15, 3): [(15, 4), (14, 3)],
    (15, 4): [(15, 5), (14, 4)],
    (15, 5): [(15, 6), (14, 5)],
    (15, 6): [(15, 7), (14, 6)],
    (15, 7): [(15, 8), (14, 7)],
    (15, 8): [(15, 9), (16, 8)],
    (15, 9): [(15, 10), (16, 9)],
    (15, 10): [(15, 11)],
    (15, 11): [(14, 11), (15, 12)],
    (15, 12): [(15, 13), (14, 12)],
    (15, 13): [(15, 14), (14, 13), (16, 13)],
    (15, 14): [(15, 15), (14, 14)],
    (15, 15): [(15, 16), (14, 15)],
    (15, 16): [(15, 17), (14, 16), (16, 16)],
    (15, 17): [(15, 18), (14, 17), (16, 17)],
    (15, 18): [(15, 19), (14, 18)],
    (15, 19): [(15, 20), (14, 19)],
    (15, 20): [(15, 21), (14, 20)],
    (15, 21): [(15, 22), (14, 21)],
    (15, 22): [(15, 23), (14, 22)],
    (15, 23): [(15, 22), (14, 23)],
    #########
    (16, 0): [(17, 0), (16, 1)],
    (16, 1): [(17, 1), (16, 0)],
    (16, 4): [(16, 5), (15, 4)],
    (16, 5): [(15, 5), (16, 4)],
    (16, 8): [(16, 9), (17, 8)],
    (16, 9): [(16, 8), (17, 9)],
    (16, 10): [(15, 10), (16, 11)],
    (16, 11): [(15, 11), (16, 10)],
    (16, 16): [(16, 17), (17, 16)],
    (16, 17): [(17, 17), (16, 16)],
    (16, 22): [(15, 22), (16, 23)],
    (16, 23): [(15, 23), (16, 22)],
    #########
    (17, 0): [(18, 0), (17, 1)],
    (17, 1): [(18, 1), (17, 0)],
    (17, 4): [(16, 4), (17, 5)],
    (17, 5): [(16, 5), (17, 4), (17, 6)],
    (17, 8): [(18, 8), (17, 9)],
    (17, 9): [(17, 8), (18, 9)],
    (17, 10): [(16, 10), (17, 11)],
    (17, 11): [(16, 11), (17, 10)],
    (17, 16): [(18, 16), (17, 17)],
    (17, 17): [(18, 17), (17, 16)],
    (17, 22): [(16, 22), (17, 23)],
    (17, 23): [(16, 23), (17, 22)],
    #########
    (18, 0): [(19, 0), (18, 1)],
    (18, 1): [(19, 1), (18, 0)],
    (18, 4): [(17, 4), (18, 5)],
    (18, 5): [(17, 5), (18, 4)],
    (18, 8): [(19, 8), (18, 9)],
    (18, 9): [(19, 9), (18, 8)],
    (18, 10): [(17, 10), (18, 11)],
    (18, 11): [(18, 10), (17, 11)],
    (18, 12): [(18, 13), (19, 12)],
    (18, 13): [(18, 14), (19, 13)],
    (18, 14): [(18, 15), (19, 14)],
    (18, 15): [(18, 16), (19, 15)],
    (18, 16): [(18, 17), (19, 16)],
    (18, 17): [(18, 16), (19, 17)],
    (18, 18): [(18, 17), (19, 18)],
    (18, 19): [(18, 18), (19, 19)],
    (18, 20): [(18, 19), (19, 20), (17,20)],
    (18, 21): [(18, 20), (19, 21)],
    (18, 22): [(17, 22), (18, 21), (18, 23)],
    (18, 23): [(17, 23), (18, 22)], 
    #########
    (19, 0): [(20, 0), (19, 1)],
    (19, 1): [(20, 1), (19, 0)],
    (19, 4): [(18, 4), (19, 5), (19, 3)],
    (19, 5): [(19, 4), (18, 5), (19, 6)],
    (19, 8): [(19, 9), (20, 8)],
    (19, 9): [(20, 9), (19, 8)],
    (19, 10): [(20, 10), (19, 11)],
    (19, 11): [(18, 11), (20, 11), (19, 10)],
    (19, 12): [(19, 13), (18, 12)],
    (19, 13): [(19, 14), (18, 13)],
    (19, 14): [(19, 15), (18, 14)],
    (19, 15): [(19, 16), (18, 15)],
    (19, 16): [(19, 17), (20, 16)],
    (19, 17): [(19, 16), (20, 17)],
    (19, 18): [(19, 17), (18, 18)],
    (19, 19): [(19, 18), (18, 19), (20, 19)],
    (19, 20): [(19, 19), (18, 20)],
    (19, 21): [(19, 20), (18, 21)],
    (19, 22): [(18, 22), (19, 23)],
    (19, 23): [(18, 23), (19, 22)],
    #########
    (20, 0): [(21, 0), (20, 1)],
    (20, 1): [(21, 1), (20, 0)],
    (20, 4): [(19, 4), (20, 5)],
    (20, 5): [(19, 4), (20, 5)],
    (20, 8): [(21, 8), (20, 9)],  
    (20, 9): [(19, 9), (20, 10)],
    (20, 10): [(19, 10), (20, 11)],
    (20, 11): [(19, 11), (20, 10), (20, 11)],
    (20, 16): [(21, 16), (21, 17)],
    (20, 17): [(20, 16), (21, 17)],
    (20, 22): [(19, 22), (20, 23)],
    (20, 23): [(19, 23), (20, 22)],
    #########
    (21, 0): [(21, 1), (22, 0)],
    (21, 1): [(21, 0), (22, 1)],
    (21, 4): [(20, 4), (21, 5)], 
    (21, 5): [(20, 5), (21, 4)],
    (21, 8): [(22, 8), (21, 9)], 
    (21, 9): [(22, 9), (21, 8)],
    (21, 10): [(20, 10), (21, 11)],
    (21, 11): [(20, 11), (21, 10)],
    (21, 16): [(22, 16), (21, 17)],
    (21, 17): [(22, 17), (21, 16)],
    (21, 22): [(20, 22), (20, 23)],
    (21, 23): [(21, 22), (20, 23)],
    #########
    (22, 0): [(23, 0), (22, 1)],
    (22, 1): [(23, 1), (22, 2)],
    (22, 2): [(23, 2), (22, 3)],
    (22, 3): [(23, 3), (22, 4)],
    (22, 4): [(23, 4), (22, 5), (21, 4)],
    (22, 5): [(23, 5), (22, 6), (21, 5)],
    (22, 6): [(23, 6), (22, 7)],
    (22, 7): [(23, 7), (22, 8)],
    (22, 8): [(23, 8), (22, 9)],
    (22, 9): [(23, 9), (22, 10)],
    (22, 10): [(23, 10), (22, 11), (21, 10)],
    (22, 11): [(23, 11), (22, 12), (21, 11)],
    (22, 12): [(23, 12), (22, 13)],
    (22, 13): [(23, 13), (22, 14)],
    (22, 14): [(23, 14), (22, 15),(21,14)],
    (22, 15): [(23, 15), (22, 16)],
    (22, 16): [(23, 16), (22, 17)],
    (22, 17): [(23, 17), (22, 18)],
    (22, 18): [(23, 18), (22, 19)],
    (22, 19): [(23, 19), (22, 20)],
    (22, 20): [(23, 20), (22, 21)],
    (22, 21): [(23, 21), (22, 22)],
    (22, 22): [(23, 22), (22, 23), (21, 22)],
    (22, 23): [(21, 23), (22, 22)],
    #########
    (23, 0): [(23, 1)],
    (23, 1): [(23, 2)],
    (23, 2): [(23, 3), (22, 2)],
    (23, 3): [(23, 4), (22, 3)],
    (23, 4): [(23, 5), (22, 4)],
    (23, 5): [(23, 6), (22, 5)],
    (23, 6): [(23, 7), (22, 6)],
    (23, 7): [(23, 8), (22, 7)],
    (23, 8): [(23, 9), (22, 8)],
    (23, 9): [(23, 10), (22, 9)],
    (23, 10): [(23, 11), (22, 10)],
    (23, 11): [(23, 12), (22, 11)],
    (23, 12): [(23, 13), (22, 12)],
    (23, 13): [(23, 14), (22, 13)],
    (23, 14): [(23, 15), (22, 14)],
    (23, 15): [(23, 16), (22, 15)],
    (23, 16): [(23, 17), (22, 16)],
    (23, 17): [(23, 18), (22, 17)],
    (23, 18): [(23, 19), (22, 18)],
    (23, 19): [(23, 20), (22, 19)],
    (23, 20): [(23, 21), (22, 20)],
    (23, 21): [(23, 22), (22, 21)],
    (23, 22): [(23, 23), (22, 22)],
    (23, 23): [(22, 23)]
}

p_iniciales = [(9, 22), (1, 20),
               (18, 20), (12, 19),
               (19, 19), (6, 17),
               (8, 16), (22, 14),
               (5, 13), (12, 13),
               (15, 13), (1, 6),
               (17, 5), (19, 5),
               (6, 3), (7, 3),
               (19, 4)
               ]

p_finales = [(9, 21), (2, 20),
            (17, 20), (11, 19),
            (20, 19), (6, 18),
            (8, 15), (21, 14),
            (4, 13), (11, 13),
            (16, 13), (2, 6),
            (17, 6), (19, 6),
            (5, 3), (8, 3),
            (19, 3)]

p_iniciales_norte = [(12, 23), (12, 22),
                     (12, 21), (12, 20),
                     (12, 19), (12, 18)]

p_iniciales_este = [(23, 11), (22, 11),
                    (21, 11), (20, 11)]

p_iniciales_sur = [(15, 0), (15, 1),
                   (15, 2), (15, 3),
                   (15, 4)]

p_iniciales_oeste = [(0, 8), (1, 8),
                     (2, 8), (3, 8),
                     (4, 8), (5, 8)]


Grafo = nx.DiGraph()
for nodo, adyacentes in nodos.items():
    Grafo.add_node(nodo)
    for adyacente in adyacentes:
        Grafo.add_edge(nodo, adyacente, costo = 1.0)

def pasos_autos(model):
    pasos = []
    Autos = []

    for agent in model.schedule.agents:
        if isinstance(agent, AgenteAuto):
            Autos.append(agent)

    
    for auto in Autos:
        pasos.append(auto.paso)
    
    return pasos
            
    

class AgenteEdificio(mesa.Agent):
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)
        self.val = 0
        
        

class AgenteSemaforoR(mesa.Agent):
    def __init__(self, unique_id, model, vall):
        super().__init__(unique_id, model)
        self.val = 6
        self.cambio = 0
        if vall == 1:
            self.val = 1
        if vall == 2:
            self.val = 2


            
    def step(self):
        if self.cambio %  == 0:
            if (self.val == 1):
                self.val = 2
            elif (self.val == 2):
                self.val = 1

        self.cambio += 1




        
class AgenteGlorieta(mesa.Agent):
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)
        self.val = 3

class AgenteEstacionamiento(mesa.Agent):
    def __init__(self, unique_id, model):
        super().__init__(unique_id, model)
        self.val = 4

class AgenteAuto(mesa.Agent):
    def __init__(self, unique_id, model, pos_inicial, pos_final, Grafoo):
        super().__init__(unique_id, model)
        self.val = 5
        self.pos_inicial = pos_inicial
        self.pos_final = pos_final
        self.graf = Grafoo
        self.contador = 1
        self.paso = 0
        self.llegado = 0

        self.ruta = nx.shortest_path(self.graf, self.pos_inicial, self.pos_final)


    def move(self, c):
        next_position = self.ruta[c]

        cellmates = self.model.grid.get_cell_list_contents([next_position])

        for agent in cellmates:
            if isinstance(agent, AgenteSemaforoR) and agent.val == 2:
                self.contador -= 1
                return  
            
        for agent in cellmates:
            if isinstance(agent, AgenteAuto):
                self.contador -=1
                return



        self.model.grid.move_agent(self, self.ruta[c])

    def step(self):
        c = self.contador

        if len(self.ruta) > c:
            self.move(c)
            self.paso += 1

        self.contador += 1
        

        if self.pos == self.pos_final:
            self.llegado = 1




class SemaforoModelN(mesa.Model):
    def __init__(self, width, height):
        self.schedule = mesa.time.RandomActivation(self)
        self.grid = mesa.space.MultiGrid(width, height, False)
        self.running = True
        self.m = 0
        R = 0
        self.primero = True
        self.esperar = 0

        mapa_2 = [[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', '#', '#', '#', '#', ' ', ' ', '#', '#', '#', '#', ' ', ' ', ' ', ' ', '#', '#', '#', '#', '#', '#', ' ', ' '],
                  [' ', ' ', '#', '#', '#', '$', ' ', ' ', '$', '#', '#', '#', ' ', ' ', ' ', ' ', '#', '#', '#', '$', '#', '#', ' ', ' '],
                  [' ', ' ', '#', '#', '#', '#', ' ', ' ', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', '#', '#', '#', '#', ' ', ' ', '#', '#', '#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', '$', '#', '#', '#', ' ', ' ', '#', '#', '#', '#', ' ', ' ', ' ', ' ', '#', '$', '#', '$', '#', '#', ' ', ' '],
                  [' ', ' ', '#', '#', '#', '#', ' ', ' ', '#', '#', '#', '#', ' ', ' ', ' ', '/', '#', '#', '#', '#', '#', '#', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '/', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '/', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', '#', '#', '#', ' ', ' ', '#', '#', '#', '#', '#', '/', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', '#', ' ', ' '],
                  [' ', ' ', '#', '#', '$', ' ', ' ', '#', '#', '#', '#', '$', ' ', ' ', ' ', ' ', '$', '#', ' ', ' ', '#', '#', ' ', ' '],
                  [' ', ' ', '#', '#', '#', ' ', ' ', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', '$', ' ', ' '],
                  [' ', ' ', '#', '#', '#', ' ', ' ', '#', '$', '#', '#', '#', ' ', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', '#', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],              
                  [' ', ' ', '#', '#', '#', '#', '$', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', '#', ' ', ' '],
                  [' ', ' ', '#', '#', '#', '#', '#', '#', '#', '#', '#', '$', ' ', ' ', ' ', ' ', '#', '#', ' ', ' ', '$', '#', ' ', ' '],
                  [' ', ' ', '$', '#', '#', '#', '#', '#', '#', '#', '#', '#', ' ', ' ', ' ', ' ', '#', '$', ' ', ' ', '#', '#', ' ', ' '],
                  [' ', ' ', '#', '#', '#', '#', '#', '#', '#', '$', '#', '#', ' ', ' ', ' ', ' ', '#', '#', ' ', ' ', '#', '#', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]
        
        n_i = 0
        n_j = 0
        for i in mapa_2:
            for j in i:

                if j == '#':
                    r = AgenteEdificio(R, self)
                    self.schedule.add(r)

                    x = n_j 
                    y = n_i
                    self.grid.place_agent(r, (x, y))

                    R += 1

                if j == '/':
                    col = random.randint(1, 2)

                    r = AgenteSemaforoR(R, self, col)
                    self.schedule.add(r)

                    x = n_j 
                    y = n_i

                    self.grid.place_agent(r, (x, y))

                    R += 1


                if j == '%':
                    r = AgenteGlorieta(R, self)
                    self.schedule.add(r)

                    x = n_j 
                    y = n_i
                    self.grid.place_agent(r, (x, y))

                    R += 1

                if j == '$':
                    r = AgenteEstacionamiento(R, self)
                    self.schedule.add(r)

                    x = n_j 
                    y = n_i
                    self.grid.place_agent(r, (x, y))

                    R += 1
                
                n_j += 1

            n_j = 0
            n_i += 1


        posiciones_pasadas_i = []

        pos1 = random.randrange(1, 4)
        for i in range(pos1):        
            p_inicial = random.choice(p_iniciales_norte)
            p_final = (12, 0)
            j = R + 1 + i

            while p_inicial in posiciones_pasadas_i:
                p_inicial = random.choice(p_iniciales_norte)

                
            c = AgenteAuto(j, self, p_inicial, p_final, Grafo)
            self.schedule.add(c)
                
            x = p_inicial[0]
            y = p_inicial[1]

            self.grid.place_agent(c, (x, y))

            posiciones_pasadas_i.append(p_inicial)

        R += 3
        pos1 = random.randrange(1, 4)
        for i in range(pos1):        
            p_inicial = random.choice(p_iniciales_este)
            p_final = (0, 11)
            j = R + 1 + i

            while p_inicial in posiciones_pasadas_i:
                p_inicial = random.choice(p_iniciales_este)

                
            c = AgenteAuto(j, self, p_inicial, p_final, Grafo)
            self.schedule.add(c)
                
            x = p_inicial[0]
            y = p_inicial[1]

            self.grid.place_agent(c, (x, y))

            posiciones_pasadas_i.append(p_inicial)

        R += 3
        pos1 = random.randrange(1, 4)
        for i in range(pos1):        
            p_inicial = random.choice(p_iniciales_sur)
            p_final = (15, 23)
            j = R + 1 + i

            while p_inicial in posiciones_pasadas_i:
                p_inicial = random.choice(p_iniciales_sur)

                
            c = AgenteAuto(j, self, p_inicial, p_final, Grafo)
            self.schedule.add(c)
                
            x = p_inicial[0]
            y = p_inicial[1]

            self.grid.place_agent(c, (x, y))

            posiciones_pasadas_i.append(p_inicial)

        R += 3
        pos1 = random.randrange(1, 4)
        for i in range(pos1):        
            p_inicial = random.choice(p_iniciales_oeste)
            p_final = (23, 8)
            j = R + 1 + i

            while p_inicial in posiciones_pasadas_i:
                p_inicial = random.choice(p_iniciales_oeste)

                
            c = AgenteAuto(j, self, p_inicial, p_final, Grafo)
            self.schedule.add(c)
                
            x = p_inicial[0]
            y = p_inicial[1]

            self.grid.place_agent(c, (x, y))

            posiciones_pasadas_i.append(p_inicial)

        self.datacollector = mesa.DataCollector( 
            model_reporters={"Autos": pasos_autos},
        )
            
    def get_agent_position(self):
        id_pos = []
        for agent in self.schedule.agents:
            if isinstance(agent, AgenteAuto):
                x = {
                    "id": agent.unique_id,
                    "pos": agent.pos
                }
                id_pos.append(x)
                
        return id_pos
    
    def get_agent_position_Sem(self):
        id_pos_sem = []
        for agent in self.schedule.agents:
            if isinstance(agent, AgenteSemaforoR):
                y = {
                    "id": agent.unique_id,
                    "estado": agent.val
                }
                id_pos_sem.append(y)
                
        return id_pos_sem
    
    def Vacios(self):
        for agent in self.schedule.agents:
            if isinstance(agent, AgenteSemaforoR):
                if agent.deteccion() == True:
                    return False
                
        return True
            
    


    def step(self):
        total_llegado = 0
        self.counttt = 0

        for agent in self.schedule.agents:
            if isinstance(agent, AgenteAuto):
                if agent.llegado == 1:
                    total_llegado += 1   

        self.schedule.step()
        self.datacollector.collect(self)
        


        if total_llegado == 4:
            self.running = False
        


        





